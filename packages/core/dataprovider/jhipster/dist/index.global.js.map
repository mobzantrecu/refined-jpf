{"version":3,"sources":["../src/index.ts"],"sourcesContent":["import axios, { AxiosInstance } from 'axios';\nimport { stringify } from 'query-string';\nimport { match } from 'ts-pattern';\nimport {\n    DataProvider,\n    HttpError,\n    CrudOperators,\n    CrudFilters,\n    CrudSorting,\n    BaseKey,\n    CrudFilter,\n    GetManyResponse,\n    GetListResponse,\n    CustomResponse,\n    DeleteOneResponse,\n    UpdateResponse,\n    CreateResponse,\n    GetOneResponse,\n} from '@refinedev/core';\nimport {\n    MetaDataQuery,\n    Pagination,\n    BaseRecord,\n} from '@refinedev/core/dist/interfaces';\n\nconst axiosInstance = axios.create();\n\naxiosInstance.interceptors.response.use(\n    (response) => {\n        return response;\n    },\n    (error) => {\n        const customError: HttpError = {\n            ...error,\n            message: error.response?.data?.message,\n            statusCode: error.response?.status,\n        };\n\n        return Promise.reject(customError);\n    }\n);\n\n/**\n *\n *\n * @see {@link https://github.com/jhipster/jhipster-bom/tree/main/jhipster-framework/src/main/java/tech/jhipster/service/filter| JHipster's filters code}\n */\nenum JHipsterCrudOperators {\n    'EQUALS' = 'equals',\n    'NOT_EQUALS' = 'notEquals',\n    'SPECIFIED' = 'specified',\n    'IN' = 'in',\n    'NOT_IN' = 'notIn',\n    'CONTAINS' = 'contains',\n    'DOES_NOT_CONTAIN' = 'doesNotContain',\n    'GREATER_THAN' = 'greaterThan',\n    'LESS_THAN' = 'lessThan',\n    'GREATER_THAN_OR_EQUAL' = 'greaterThanOrEqual',\n    'LESS_THAN_OR_EQUAL' = 'lessThanOrEqual',\n}\n\nconst mapOperator = (operator: CrudOperators): string => {\n    const op = match(operator)\n        .with('eq', () => JHipsterCrudOperators.EQUALS)\n        .with('ne', () => JHipsterCrudOperators.NOT_EQUALS)\n        .with('null', () => JHipsterCrudOperators.SPECIFIED)\n        .with('nnull', () => JHipsterCrudOperators.SPECIFIED)\n        .with('in', () => JHipsterCrudOperators.IN)\n        .with('nin', () => JHipsterCrudOperators.NOT_IN)\n        .with('contains', () => JHipsterCrudOperators.CONTAINS)\n        .with('ncontains', () => JHipsterCrudOperators.DOES_NOT_CONTAIN)\n        .with('gt', () => JHipsterCrudOperators.GREATER_THAN)\n        .with('gte', () => JHipsterCrudOperators.GREATER_THAN_OR_EQUAL)\n        .with('lt', () => JHipsterCrudOperators.LESS_THAN)\n        .with('lte', () => JHipsterCrudOperators.LESS_THAN_OR_EQUAL)\n        .otherwise((notSupportedOperator: any) => {\n            throw Error(`Operator ${notSupportedOperator} is not supported`);\n        });\n\n    return `${op}`;\n};\n\nexport const generateSort = (sort?: CrudSorting) => {\n    if (sort && sort.length > 0) {\n        const _sort: string[] = [];\n        const _order: string[] = [];\n\n        sort.map((item) => {\n            _sort.push(item.field);\n            _order.push(item.order);\n        });\n\n        return {\n            _sort,\n            _order,\n        };\n    }\n\n    return;\n};\n\nexport const generateFilter = (filters?: CrudFilters) => {\n    const queryFilters: { [key: string]: string } = {};\n\n    if (filters) {\n        filters.map((filter) => {\n            if ('field' in filter) {\n                const { field, operator, value } = filter;\n\n                const mappedOperator = mapOperator(operator);\n                queryFilters[`${field}.${mappedOperator}`] = value;\n            }\n        });\n    }\n\n    return queryFilters;\n};\n\n/**\n *\n * @privateRemarks\n * Methods are implemented as attributes of the class because {@link @pankod/refine-core#useDataProvider | the useDataProvider hook} needs to access them as an JSON Object.\n * The class it's marked as sealed because it may not be inherited and/or extended from. If you need to call another API or use a custom API call, then create another DataProvider or use the useCustom hook which will call the custom method in this class.\n *\n * @sealed\n **/\n\nclass JHipsterDataProvider implements DataProvider {\n    private apiUrl: Required<string>;\n    private httpClient: Required<AxiosInstance>;\n\n    constructor(apiUrl: string, httpClient: AxiosInstance = axiosInstance) {\n        this.apiUrl = apiUrl;\n        this.httpClient = httpClient;\n    }\n\n    public getApiUrl = (): string => {\n        return this.apiUrl;\n    };\n\n    public getOne = async <TData extends BaseRecord = BaseRecord>(params: {\n        resource: string;\n        id: BaseKey;\n        metaData?: MetaDataQuery;\n    }): Promise<GetOneResponse<TData>> => {\n        const { data } = await this.httpClient.get(\n            `${this.apiUrl}/${params.resource}/${params.id}`\n        );\n\n        return {\n            data,\n        };\n    };\n\n    /**\n     *\n     * TODO: check default values\n     **/\n    public getList = async <TData extends BaseRecord = BaseRecord>(\n        params: {\n            resource: string;\n            pagination?: Pagination;\n            hasPagination?: boolean;\n            sort?: CrudSorting;\n            filters?: CrudFilters;\n            metaData?: MetaDataQuery;\n            dataProviderName?: string;\n        } = {\n            hasPagination: true,\n            pagination: { current: 1, pageSize: 10 },\n            resource: '',\n        }\n    ): Promise<GetListResponse<TData>> => {\n        const url = `${this.apiUrl}/${params.resource}`;\n\n        const { current = 1, pageSize = 10 } = params.pagination ?? {};\n\n        const queryFilters = generateFilter(params.filters);\n\n        const query: {\n            _start?: number;\n            _end?: number;\n            _sort?: string;\n            _order?: string;\n        } = params.hasPagination\n            ? {\n                  _start: (current - 1) * pageSize,\n                  _end: current * pageSize,\n              }\n            : {};\n\n        const generatedSort = generateSort(params.sort);\n        if (generatedSort) {\n            const { _sort, _order } = generatedSort;\n            query._sort = _sort.join(',');\n            query._order = _order.join(',');\n        }\n\n        const { data, headers } = await this.httpClient.get(\n            `${url}?${stringify(query)}&${stringify(queryFilters)}`\n        );\n\n        const total = +(headers['x-total-count'] ?? Number.NaN);\n\n        return {\n            data,\n            total,\n        };\n    };\n\n    public getMany = async <TData extends BaseRecord = BaseRecord>(params: {\n        resource: string;\n        ids: BaseKey[];\n        metaData?: MetaDataQuery;\n        dataProviderName?: string;\n    }): Promise<GetManyResponse<TData>> => {\n        const idsInFilter: CrudFilter = {\n            field: 'id',\n            operator: 'in',\n            value: params.ids,\n        };\n        const queryFilters = generateFilter([idsInFilter]);\n\n        const { data } = await this.httpClient.get(\n            `${this.apiUrl}/${params.resource}?${stringify(queryFilters)}`\n        );\n\n        return {\n            data,\n        };\n    };\n\n    public create = async <\n        TData extends BaseRecord = BaseRecord,\n        TVariables = {}\n    >(params: {\n        resource: string;\n        variables: TVariables;\n        metaData?: MetaDataQuery;\n    }): Promise<CreateResponse<TData>> => {\n        const url = `${this.apiUrl}/${params.resource}`;\n\n        const { data } = await this.httpClient.post(url, params.variables);\n\n        return {\n            data,\n        };\n    };\n\n    public update = async <\n        TData extends BaseRecord = BaseRecord,\n        TVariables = {}\n    >(params: {\n        resource: string;\n        id: BaseKey;\n        variables: TVariables;\n        metaData?: MetaDataQuery;\n    }): Promise<UpdateResponse<TData>> => {\n        const url = `${this.apiUrl}/${params.resource}/${params.id}`;\n\n        const { data } = await this.httpClient.put(url, params.variables);\n\n        return {\n            data,\n        };\n    };\n\n    public deleteOne = async <\n        TVariables = {},\n        TData extends BaseRecord = BaseRecord\n    >(params: {\n        resource: string;\n        id: BaseKey;\n        variables?: TVariables;\n        metaData?: MetaDataQuery;\n    }): Promise<DeleteOneResponse<TData>> => {\n        const url = `${this.apiUrl}/${params.resource}/${params.id}`;\n\n        const { data } = await this.httpClient.delete(url, {\n            data: params.variables,\n        });\n\n        return {\n            data,\n        };\n    };\n\n    public custom = async <\n        TData extends BaseRecord = BaseRecord,\n        TQuery = unknown,\n        TPayload = unknown\n    >(params: {\n        url: string;\n        method:\n            | 'get'\n            | 'delete'\n            | 'head'\n            | 'options'\n            | 'post'\n            | 'put'\n            | 'patch';\n        sort?: CrudSorting;\n        filters?: CrudFilter[];\n        payload?: TPayload;\n        query?: TQuery;\n        headers?: {};\n        metaData?: MetaDataQuery;\n    }): Promise<CustomResponse<TData>> => {\n        throw Error('Not implemented');\n    };\n}\n\nconst JHipsterServer = (\n    apiUrl: string,\n    httpClient: AxiosInstance = axiosInstance\n): Omit<Required<DataProvider>, 'createMany' | 'updateMany' | 'deleteMany'> => {\n    const jhipsterDataProvider = new JHipsterDataProvider(apiUrl, httpClient);\n    return jhipsterDataProvider;\n};\n\nexport default JHipsterServer;\n"],"mappings":"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","names":["axios"]}